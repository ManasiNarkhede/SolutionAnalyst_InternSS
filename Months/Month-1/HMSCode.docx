HOSPITAL MANAGEMENT SYSTEM

1.	Start.sql
CREATE DATABASE hospital;

CREATE SCHEMA hospital_management;


2.	PatientsTable.sql
USE hospital_management;

-- Create Patients Table
CREATE TABLE Patients (
    PatientID INT PRIMARY KEY,
    FirstName VARCHAR(50),
    LastName VARCHAR(50),
    DOB DATE,
    Gender VARCHAR(10),
    ContactNumber VARCHAR(15),
    Email VARCHAR(100),
    Address VARCHAR(255)
);

-- Insert data into the Patients table
INSERT INTO Patients (PatientID, FirstName, LastName, DOB, Gender, ContactNumber, Email, Address)
VALUES
  (1, 'Ayush', 'Kumar', '2000-05-15', 'Male', '9876543410', 'ayush.kumar@gmail.com', '12Street, Hyderabad'),
  (2, 'Sanya', 'Sharma', '1995-08-22', 'Female', '8765732109', 'sanya.sharma@gmail.com', '45Street, Pune'),
  (3, 'Rahul', 'Gupta', '2012-06-10', 'Male', '7654322098', 'rahul.gupta@gmail.com', '78Street, Mumbai'),
  (4, 'Neha', 'Verma', '2003-11-03', 'Female', '6541045987', 'neha.verma@gmail.com', '10Street, Nashik'),
  (5, 'Arjun', 'Singh', '1998-07-18', 'Male', '54313109876', 'arjun.singh@gmail.com', '20Street, Pune');

ALTER TABLE Patients
ADD COLUMN InsuranceExpiryDate DATE;

-- Add InsuranceExpired column 
ALTER TABLE Patients
ADD COLUMN InsuranceExpired VARCHAR(3) DEFAULT 'No';

-- Update InsuranceExpiryDate for patients
UPDATE Patients
SET InsuranceExpiryDate = 
    CASE
        WHEN PatientID = 1 THEN '2024-12-31'
        WHEN PatientID = 2 THEN '2025-06-30'
        WHEN PatientID = 3 THEN '2023-10-15'
        WHEN PatientID = 4 THEN '2024-08-01'
        WHEN PatientID = 5 THEN '2025-01-20'
    END
WHERE PatientID IN (1, 2, 3, 4, 5);


3.	DoctorsTable.sql
USE hospital_management;

-- Create Doctors Table
CREATE TABLE Doctors (
    DoctorID INT PRIMARY KEY,
    FirstName VARCHAR(50),
    LastName VARCHAR(50),
    Specialization VARCHAR(100),
    ContactNumber VARCHAR(15),
    Email VARCHAR(100)
);


4.	DepartmentTable.sql
USE hospital_management;

-- Create Departments Table
CREATE TABLE Departments (
    DepartmentID INT PRIMARY KEY,
    DepartmentName VARCHAR(100)
);


5.	AppointmentTable.sql
USE hospital_management;

-- Create Appointments Table
CREATE TABLE Appointments (
    AppointmentID INT PRIMARY KEY,
    PatientID INT,
    DoctorID INT,
    AppointmentDate DATE,
    Status VARCHAR(20),
    FOREIGN KEY (PatientID) REFERENCES Patients(PatientID),
    FOREIGN KEY (DoctorID) REFERENCES Doctors(DoctorID)
);


6.	Medical RecordTable.sql
USE hospital_management;

-- Create MedicalRecords Table
CREATE TABLE MedicalRecords (
    RecordID INT PRIMARY KEY,
    PatientID INT,
    DoctorID INT,
    AppointmentID INT,
    Diagnosis VARCHAR(255),
    Prescription TEXT,
    DateRecorded DATE,
    FOREIGN KEY (PatientID) REFERENCES Patients(PatientID),
    FOREIGN KEY (DoctorID) REFERENCES Doctors(DoctorID),
    FOREIGN KEY (AppointmentID) REFERENCES Appointments(AppointmentID)
);


7.	DiagnosisTable.sql
-- Add to the list of diagnosis of the patient tagged by date

USE hospital_management;

-- Create Diagnosis Table
CREATE TABLE Diagnosis (
    DiagnosisID INT PRIMARY KEY,
    PatientID INT,
    DiagnosisDetails TEXT,
    DateTagged DATE,
    FOREIGN KEY (PatientID) REFERENCES Patients(PatientID)
);

SELECT DISTINCT PatientID FROM patients;

-- Query to add a diagnosis for a patient
INSERT INTO Diagnosis (DiagnosisID, PatientID, DiagnosisDetails, DateTagged)
VALUES (1, 1, 'Cold', '2020-02-01');


8.	InsuranceExpiryLogTable.sql
-- Create InsuranceExpiryLog Table
CREATE TABLE InsuranceExpiryLog (
    LogID INT PRIMARY KEY AUTO_INCREMENT,
    PatientID INT,
    ExpiredDate TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (PatientID) REFERENCES Patients(PatientID)
);

-- Check if insurance is expired for each patient
SELECT
    PatientID,
    FirstName,
    LastName,
    InsuranceExpiryDate,
    CASE
        WHEN InsuranceExpiryDate IS NULL THEN 'No Insurance' -- when expiry date is not set
        WHEN InsuranceExpiryDate < CURDATE() THEN 'Expired'
        ELSE 'Not Expired'
    END AS InsuranceExpired
FROM Patients;


9.	UserRolesTable.sql
-- Register New User Roles and Personas

USE hospital_management;

-- Create UserRoles Table
CREATE TABLE UserRoles (
    RoleID INT PRIMARY KEY,
    RoleName VARCHAR(50)
);

-- Insert Default User Roles
INSERT INTO UserRoles (RoleID, RoleName) VALUES (1, 'Admin');
INSERT INTO UserRoles (RoleID, RoleName) VALUES (2, 'Doctor');
INSERT INTO UserRoles (RoleID, RoleName) VALUES (3, 'Receptionist');


10.	UpcomingAppointmentsView.sql

USE hospital_management;

-- Create UpcomingAppointmentsView
CREATE VIEW UpcomingAppointmentsView AS
SELECT *
FROM Appointments
WHERE AppointmentDate >= CURDATE();


11.	PatientHistoryView.sql
USE hospital_management;

-- Create PatientHistoryView
CREATE VIEW PatientHistoryView AS
SELECT P.PatientID, P.FirstName, P.LastName, A.AppointmentID, A.AppointmentDate, M.Diagnosis, M.Prescription, M.DateRecorded
FROM Patients P
JOIN Appointments A ON P.PatientID = A.PatientID
LEFT JOIN MedicalRecords M ON A.AppointmentID = M.AppointmentID;


12.	OptimizeView.sql
-- Optimize Repeated Read Operations Using Views

-- Create a View for Patient History
CREATE VIEW PatientHistView AS
SELECT P.PatientID, P.FirstName, P.LastName, A.AppointmentID, A.AppointmentDate, M.Diagnosis, M.Prescription, M.DateRecorded
FROM Patients P
LEFT JOIN Appointments A ON P.PatientID = A.PatientID
LEFT JOIN MedicalRecords M ON A.AppointmentID = M.AppointmentID;


-- To fetch patient history 
SELECT * FROM PatientHistView WHERE PatientID = 1;


13.	HmIndexes.sql
USE hospital_management;

-- Create Indexes
CREATE INDEX idx_patient_id ON Patients(PatientID);
CREATE INDEX idx_doctor_id ON Doctors(DoctorID);
CREATE INDEX idx_appointment_date ON Appointments(AppointmentDate);

-- Optimize Read Operations Using Indexing
-- Create Index on PatientID in MedicalRecords table
CREATE INDEX idx_patient_id_medical_records ON MedicalRecords(PatientID);


14.	GenerateBillProcedure.sql
-- Prepare Bill for the Patient and Optimize Bill Generation Using Stored Procedures
USE hospital_management;

DELIMITER //

CREATE PROCEDURE GeneratePatientBillProcedure (
    IN p_PatientID INT
)
BEGIN
    DECLARE totalCost DECIMAL(10, 2);

    -- Calculate total cost from Appointments
    SELECT COALESCE(SUM(Cost), 0)
    INTO totalCost
    FROM (
        SELECT A.AppointmentID, 50 AS Cost -- Assuming a fixed cost for each appointment
        FROM Appointments A
        WHERE A.PatientID = p_PatientID
    ) AS AppointmentCosts;

    -- Add cost from MedicalRecords
    SELECT COALESCE(SUM(Cost), 0)
    INTO totalCost
    FROM (
        SELECT M.AppointmentID, 30 AS Cost -- Assuming a fixed cost for each medical record
        FROM MedicalRecords M
        WHERE M.PatientID = p_PatientID
    ) AS MedicalRecordCosts;

    -- Insert the total cost into a Billing table 
    INSERT INTO Billing (PatientID, TotalCost, BillingDate)
    VALUES (p_PatientID, totalCost, CURDATE());

    SELECT * FROM Billing WHERE PatientID = p_PatientID;
END //

DELIMITER ;


15.	CreateAppointmentProcedure.sql
-- Create Stored Procedures
DELIMITER //

CREATE PROCEDURE CreateAppointmentProcedure (
    IN p_PatientID INT,
    IN p_DoctorID INT,
    IN p_AppointmentDate DATE
)
BEGIN
    INSERT INTO Appointments (PatientID, DoctorID, AppointmentDate, Status)
    VALUES (p_PatientID, p_DoctorID, p_AppointmentDate, 'Scheduled');
END //


16.	InsuranceExpiryTrigger.sql
-- Trigger to indicate when a patient's medical insurance limit has expired
DELIMITER //

CREATE TRIGGER InsuranceExpiryTrigger
BEFORE INSERT ON MedicalRecords
FOR EACH ROW
BEGIN
    DECLARE insuranceExpiry DATE;

    -- Fetch the insurance expiry date for the patient
    SELECT InsuranceExpiryDate INTO insuranceExpiry
    FROM Patients
    WHERE PatientID = NEW.PatientID;

    -- Check if the medical record date is after the insurance expiry date
    IF NEW.DateRecorded > insuranceExpiry AND NEW.DateRecorded > NOW() THEN
        -- Update the InsuranceExpired flag to 1
        UPDATE Patients
        SET InsuranceExpired = 1
        WHERE PatientID = NEW.PatientID;

        -- Insert an entry into the InsuranceExpiryLog table
        INSERT INTO InsuranceExpiryLog (PatientID, ExpiredDate)
        VALUES (NEW.PatientID, NOW());
    END IF;
END //

DELIMITER ;


17.	AppointmentStatusTrigger.sql
USE hospital_management;

DELIMITER //

-- Create AppointmentStatusTrigger
CREATE TRIGGER AppointmentStatusTrigger
BEFORE INSERT ON Appointments
FOR EACH ROW
BEGIN
    IF NEW.AppointmentDate < CURDATE() THEN
        SET NEW.Status = 'Past';
    END IF;
END;
//

-- Reset the delimiter
DELIMITER ;


18.	FetchDetails.sql
-- Fetch Required Details of a Particular Patient:

-- Query to fetch details of a particular patient
SELECT *
FROM Patients
WHERE PatientID = 1;

-- Fetch patient details along with appointments, doctors, and diagnoses
SELECT P.*, A.AppointmentDate, D.FirstName AS DoctorFirstName, D.LastName AS DoctorLastName, Di.DiagnosisDetails
FROM Patients P
LEFT JOIN Appointments A ON P.PatientID = A.PatientID
LEFT JOIN Doctors D ON A.DoctorID = D.DoctorID
LEFT JOIN Diagnosis Di ON P.PatientID = Di.PatientID;
